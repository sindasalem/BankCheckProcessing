{"version":3,"sources":["webpack:///./src/app/image-view/image-view.module.ts","webpack:///./src/app/image-view/image-view.page.html","webpack:///./src/app/image-view/image-view.page.ts"],"names":[],"mappings":"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","file":"image-view-image-view-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { ImageViewPage } from './image-view.page';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        IonicModule,\n        RouterModule.forChild([\n            {\n                path: '',\n                component: ImageViewPage\n            }\n        ])\n    ],\n    declarations: [ImageViewPage]\n})\nexport class ImageViewPageModule {}\n","module.exports = \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button defaultHref=\\\"image-results\\\"></ion-back-button>\\n        </ion-buttons>\\n        <ion-title>\\n            Image View\\n        </ion-title>\\n    </ion-toolbar>\\n</ion-header>\\n\\n<ion-content padding>\\n    <img [src]='page.sanitizedDocumentPreviewImage' />\\n</ion-content>\\n\\n<ion-footer>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-button (click)=\\\"startCroppingScreen()\\\">\\n                <ion-icon slot=\\\"start\\\" name=\\\"crop\\\"></ion-icon>\\n                Crop / Rotate\\n            </ion-button>\\n            <ion-button (click)=\\\"upload()\\\">\\n                <ion-icon slot=\\\"start\\\" name=\\\"contrast\\\"></ion-icon>\\n                Process Cheque\\n            </ion-button>\\n        </ion-buttons>\\n        <ion-buttons slot=\\\"end\\\">\\n            <ion-button (click)=\\\"deletePage()\\\">\\n                <ion-icon slot=\\\"start\\\" name=\\\"trash\\\"></ion-icon>\\n                Delete\\n            </ion-button>\\n        </ion-buttons>\\n    </ion-toolbar>\\n</ion-footer>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { ActionSheetController } from '@ionic/angular';\nimport { ActivatedRoute, Router, ParamMap } from '@angular/router';\nimport { switchMap, map } from 'rxjs/operators';\nimport { of, Observable } from 'rxjs';\n\nimport { ImageFilter, Page } from 'cordova-plugin-scanbot-sdk';\n\nimport { DialogsService } from '../services/dialogs.service';\nimport { ScanbotSdkDemoService } from '../services/scanbot-sdk-demo.service';\nimport { ImageResultsRepository, SanitizedPage } from '../services/image-results.repository';\n\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Base64 } from '@ionic-native/base64/ngx';\nimport { DataTransferService } from '../data-transfer.service';\nimport { LoadingController } from '@ionic/angular';\nimport { async } from '@angular/core/testing';\n\n@Component({\n    selector: 'app-image-view',\n    templateUrl: 'image-view.page.html',\n})\nexport class ImageViewPage implements OnInit {\n\n    public page: SanitizedPage;\n    \n\n    private imageFilterList: ImageFilter[] = [\n        'NONE',\n        'COLOR_ENHANCED',\n        'GRAYSCALE',\n        'BINARIZED',\n        'COLOR_DOCUMENT',\n        'PURE_BINARIZED',\n        'BACKGROUND_CLEAN',\n        'BLACK_AND_WHITE',\n        'OTSU_BINARIZATION',\n        'DEEP_BINARIZATION',\n        'EDGE_HIGHLIGHT',\n        'LOW_LIGHT_BINARIZATION',\n        'LOW_LIGHT_BINARIZATION_2',\n    ];\n\n    constructor(private scanbotService: ScanbotSdkDemoService,\n                private imageResultsRepository: ImageResultsRepository,\n                private dialogsService: DialogsService,\n                private router: Router,\n                private route: ActivatedRoute,\n                private actionSheetController: ActionSheetController,\n                private http: HttpClient,\n                private base64: Base64,\n                private dataTransferService: DataTransferService,\n                public loadingCtrl: LoadingController) { }\n\n    ngOnInit() {\n        this.route.paramMap.pipe(\n            switchMap((params: ParamMap) => of(params.get('pageId')))\n        ).subscribe(pageId => {\n            this.page = this.imageResultsRepository.getPageById(pageId);\n        });\n    }\n\n    async startCroppingScreen() {\n        if (!(await this.scanbotService.checkLicense())) { return; }\n\n        const result = await this.scanbotService.SDK.UI.startCroppingScreen({\n            page: this.page as Page,\n            uiConfigs: {\n                // Customize colors, text resources, behavior, etc..\n                doneButtonTitle: 'Save',\n                orientationLockMode: 'PORTRAIT'\n                // ...\n            }\n        });\n\n        if (result.status === 'CANCELED') { return; }\n\n        this.updatePage(result.page);\n    }\n\n    async deletePage() {\n        await this.scanbotService.SDK.removePage({page: this.page as Page});\n        this.imageResultsRepository.removePage(this.page);\n        await this.router.navigate(['/image-results']);\n    }\n\n    private updatePage(page: Page) {\n        this.page = this.imageResultsRepository.updatePage(page);\n    }\n\n    async showFilterSelection() {\n        const buttons = [];\n        this.imageFilterList.forEach(f => {\n            buttons.push({\n                text: f,\n                handler: () => { this.applyImageFilter(f); }\n            });\n        });\n\n        buttons.push({\n            text: 'Cancel',\n            role: 'cancel',\n            handler: () => { }\n        });\n\n        const actionSheet = await this.actionSheetController.create({\n            header: 'Select an Image Filter',\n            buttons: buttons\n        });\n        await actionSheet.present();\n    }\n\n    private async applyImageFilter(filter: ImageFilter) {\n        if (!(await this.scanbotService.checkLicense())) { return; }\n\n        const loading = await this.dialogsService.createLoading('Applying image filter ...');\n        try {\n            loading.present();\n\n            const result = await this.scanbotService.SDK.applyImageFilterOnPage({page: this.page as Page, imageFilter: filter});\n            this.updatePage(result.page);\n        }\n        finally {\n            await loading.dismiss();\n        }\n    }\n\n    private async upload(){\n        const loading = this.loadingCtrl.create({\n            message: 'Please wait...',\n          });\n           (await loading).present();\n        let  url = 'http://10.0.2.2:5000/upload';\n        //let  url = 'http://192.168.23.57:5000/upload';\n        const date = new Date().valueOf();\n      \n        // Replace extension according to your media type\n        const imageName = date+ '.jpeg';\n        // call method that creates a blob from dataUri\n        //console.log(this.page.documentImageFileUri)\n        this.base64.encodeFile(this.page.documentImageFileUri).then((base64File: string) => {\n            //console.log(base64File);\n            const imageBlob = this.dataURItoBlob(base64File);\n            const imageFile = new File([imageBlob], imageName, { type: 'image/jpg' })\n            let  postData = new FormData();\n            let blob = new Blob([imageBlob],{ type: 'image/jpg' })\n            let headers = new HttpHeaders();\n            headers.append('Content-Type', 'multipart/form-data');\n            \n            postData.append('file', blob,imageName);\n          \n            this.http.post(url, postData,{headers: headers})\n            .subscribe(async data => {\n                console.log(data);\n                this.dataTransferService.sharingValue = data;\n                this.dataTransferService.sharingImage = this.page;\n                (await loading).dismiss();\n                this.router.navigate(['/check-details'])\n                }, async error => {\n                    (await loading).dismiss();\n                console.log(error);\n            });\n          }, async (err) => {\n            console.log(err);\n            (await loading).dismiss();\n          });\n        \n\n    }\n\n    dataURItoBlob(dataURI: String) {\n        var byteString = atob(dataURI.split(',')[1]);\n        var ab = new ArrayBuffer(byteString.length);\n        var ia = new Uint8Array(ab);\n    \n        for (var i = 0; i < byteString.length; i++) {\n            ia[i] = byteString.charCodeAt(i);\n        }\n        return new Blob([ab], { type: 'image/jpeg' });\n    }\n}"],"sourceRoot":""}